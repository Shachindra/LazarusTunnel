// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tunnel.proto

package tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NginxTunnelServiceClient is the client API for NginxTunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxTunnelServiceClient interface {
	GetTunnels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTunnelResponse, error)
	SetTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error)
	DeleteTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	GetByName(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error)
	//
	GetCaddyTunnels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTunnelResponse, error)
	SetCaddyTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error)
	DeleteCaddyTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	GetCaddyByName(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error)
}

type nginxTunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxTunnelServiceClient(cc grpc.ClientConnInterface) NginxTunnelServiceClient {
	return &nginxTunnelServiceClient{cc}
}

func (c *nginxTunnelServiceClient) GetTunnels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/GetTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) SetTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error) {
	out := new(SetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/SetTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) DeleteTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) GetByName(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error) {
	out := new(SetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) GetCaddyTunnels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/GetCaddyTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) SetCaddyTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error) {
	out := new(SetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/SetCaddyTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) DeleteCaddyTunnel(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/DeleteCaddyTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxTunnelServiceClient) GetCaddyByName(ctx context.Context, in *SetTunnelRequest, opts ...grpc.CallOption) (*SetTunnelResponse, error) {
	out := new(SetTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnelservice.NginxTunnelService/GetCaddyByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxTunnelServiceServer is the server API for NginxTunnelService service.
// All implementations must embed UnimplementedNginxTunnelServiceServer
// for forward compatibility
type NginxTunnelServiceServer interface {
	GetTunnels(context.Context, *Empty) (*GetTunnelResponse, error)
	SetTunnel(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error)
	DeleteTunnel(context.Context, *SetTunnelRequest) (*DeleteTunnelResponse, error)
	GetByName(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error)
	//
	GetCaddyTunnels(context.Context, *Empty) (*GetTunnelResponse, error)
	SetCaddyTunnel(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error)
	DeleteCaddyTunnel(context.Context, *SetTunnelRequest) (*DeleteTunnelResponse, error)
	GetCaddyByName(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error)
	mustEmbedUnimplementedNginxTunnelServiceServer()
}

// UnimplementedNginxTunnelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNginxTunnelServiceServer struct {
}

func (UnimplementedNginxTunnelServiceServer) GetTunnels(context.Context, *Empty) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnels not implemented")
}
func (UnimplementedNginxTunnelServiceServer) SetTunnel(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTunnel not implemented")
}
func (UnimplementedNginxTunnelServiceServer) DeleteTunnel(context.Context, *SetTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (UnimplementedNginxTunnelServiceServer) GetByName(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedNginxTunnelServiceServer) GetCaddyTunnels(context.Context, *Empty) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaddyTunnels not implemented")
}
func (UnimplementedNginxTunnelServiceServer) SetCaddyTunnel(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCaddyTunnel not implemented")
}
func (UnimplementedNginxTunnelServiceServer) DeleteCaddyTunnel(context.Context, *SetTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCaddyTunnel not implemented")
}
func (UnimplementedNginxTunnelServiceServer) GetCaddyByName(context.Context, *SetTunnelRequest) (*SetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaddyByName not implemented")
}
func (UnimplementedNginxTunnelServiceServer) mustEmbedUnimplementedNginxTunnelServiceServer() {}

// UnsafeNginxTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxTunnelServiceServer will
// result in compilation errors.
type UnsafeNginxTunnelServiceServer interface {
	mustEmbedUnimplementedNginxTunnelServiceServer()
}

func RegisterNginxTunnelServiceServer(s grpc.ServiceRegistrar, srv NginxTunnelServiceServer) {
	s.RegisterService(&NginxTunnelService_ServiceDesc, srv)
}

func _NginxTunnelService_GetTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).GetTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/GetTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).GetTunnels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_SetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).SetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/SetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).SetTunnel(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).DeleteTunnel(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).GetByName(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_GetCaddyTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).GetCaddyTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/GetCaddyTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).GetCaddyTunnels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_SetCaddyTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).SetCaddyTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/SetCaddyTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).SetCaddyTunnel(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_DeleteCaddyTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).DeleteCaddyTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/DeleteCaddyTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).DeleteCaddyTunnel(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxTunnelService_GetCaddyByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxTunnelServiceServer).GetCaddyByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelservice.NginxTunnelService/GetCaddyByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxTunnelServiceServer).GetCaddyByName(ctx, req.(*SetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxTunnelService_ServiceDesc is the grpc.ServiceDesc for NginxTunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxTunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnelservice.NginxTunnelService",
	HandlerType: (*NginxTunnelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTunnels",
			Handler:    _NginxTunnelService_GetTunnels_Handler,
		},
		{
			MethodName: "SetTunnel",
			Handler:    _NginxTunnelService_SetTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _NginxTunnelService_DeleteTunnel_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _NginxTunnelService_GetByName_Handler,
		},
		{
			MethodName: "GetCaddyTunnels",
			Handler:    _NginxTunnelService_GetCaddyTunnels_Handler,
		},
		{
			MethodName: "SetCaddyTunnel",
			Handler:    _NginxTunnelService_SetCaddyTunnel_Handler,
		},
		{
			MethodName: "DeleteCaddyTunnel",
			Handler:    _NginxTunnelService_DeleteCaddyTunnel_Handler,
		},
		{
			MethodName: "GetCaddyByName",
			Handler:    _NginxTunnelService_GetCaddyByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnel.proto",
}
